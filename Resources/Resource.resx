<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DetailCopyButton" xml:space="preserve">
    <value>复制磁力链接</value>
  </data>
  <data name="DetailDownloadButton" xml:space="preserve">
    <value>立即下载</value>
  </data>
  <data name="DetailFileList" xml:space="preserve">
    <value>文件列表</value>
  </data>
  <data name="DetailRelatedSearchWords" xml:space="preserve">
    <value>相关搜索关键字</value>
  </data>
  <data name="DetailSoYouLike" xml:space="preserve">
    <value>你可能也喜欢</value>
  </data>
  <data name="FooterAboutLink" xml:space="preserve">
    <value>关于</value>
  </data>
  <data name="IndexInputPlaceholder" xml:space="preserve">
    <value>搜索BT资源，共索引了BT资源127,207,177个。</value>
  </data>
  <data name="IndexSubmitButton" xml:space="preserve">
    <value>搜索</value>
  </data>
  <data name="IndexTips" xml:space="preserve">
    <value>最好的BT资源搜索引擎，今日新增3,193个。</value>
  </data>
  <data name="InputPlaceholder" xml:space="preserve">
    <value>搜索资源</value>
  </data>
  <data name="MagnetCreateTime" xml:space="preserve">
    <value>创建时间</value>
  </data>
  <data name="MagnetDownloadCount" xml:space="preserve">
    <value>下载次数</value>
  </data>
  <data name="MagnetFileCount" xml:space="preserve">
    <value>文件数</value>
  </data>
  <data name="MagnetFileSize" xml:space="preserve">
    <value>文件大小</value>
  </data>
  <data name="MagnetType" xml:space="preserve">
    <value>类型</value>
  </data>
  <data name="MagnetUpdateTime" xml:space="preserve">
    <value>更新时间</value>
  </data>
  <data name="SearchKeyWords" xml:space="preserve">
    <value>大家都在搜</value>
  </data>
  <data name="SearchMoreButton" xml:space="preserve">
    <value>更多</value>
  </data>
  <data name="SearchTips" xml:space="preserve">
    <value>&lt;strong&gt;如何才能找到下载速度快的资源？&lt;/strong&gt;&lt;div&gt;通常情况下，如果一个资源更新日期离现在比较近那一定有速度并且下载次数越多速度越快。&lt;/div&gt;&lt;div&gt;小伙伴们懂了吗？可以用排序功能，找&lt;b&gt;下载次数多的&lt;/b&gt;或者&lt;b&gt;比较新的&lt;/b&gt;资源，那下载速度一定是嗷嗷快。&lt;/div&gt;</value>
  </data>
  <data name="SearchTotalCount" xml:space="preserve">
    <value>根据 &lt;b&gt;{0}&lt;/b&gt; 搜索到 &lt;b&gt;{1}&lt;/b&gt; 个相关资源</value>
  </data>
  <data name="WebDescription" xml:space="preserve">
    <value>BT香蕉（btbanana.com）是收录最快，最全的bt搜索引擎，共收录BT资源超过2亿个，每天新收录超过20万个。</value>
  </data>
  <data name="WebKeyWords" xml:space="preserve">
    <value>BT搜索，磁力搜索，电影资源搜索</value>
  </data>
  <data name="WebTitle" xml:space="preserve">
    <value>BT香蕉 - 磁力链接，BT资源，种子搜索引擎</value>
  </data>
</root>